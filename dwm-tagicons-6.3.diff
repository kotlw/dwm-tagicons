diff -ruN dwmp1/config.def.h dwmp2/config.def.h
--- dwmp1/config.def.h	2022-05-01 00:16:26.417524985 +0300
+++ dwmp2/config.def.h	2022-05-01 00:17:20.718846125 +0300
@@ -21,14 +21,19 @@
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
+static const char ptagf[] = "%s: %s";	/* format of a tag label */
+static const char etagf[] = "%s";	    /* format of an empty tag */
+static const char iconsep[] = " ";      /* separator betwewn icons of tag label*/
+static const int tagl_maxw = 95;        /* max width of tag label */
+
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* icon     class       instance    title       tags mask     isfloating   monitor */
+	{ "",      "Gimp",     NULL,       NULL,       0,            1,           -1 },
+	{ "",      "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
 };
 
 /* layout(s) */
diff -ruN dwmp1/dwm.c dwmp2/dwm.c
--- dwmp1/dwm.c	2022-05-01 00:16:26.417524985 +0300
+++ dwmp2/dwm.c	2022-05-01 00:17:20.718846125 +0300
@@ -86,6 +86,7 @@
 typedef struct Client Client;
 struct Client {
 	char name[256];
+    char *icon;
 	float mina, maxa;
 	int x, y, w, h;
 	int oldx, oldy, oldw, oldh;
@@ -133,6 +134,7 @@
 };
 
 typedef struct {
+    char *icon;
 	const char *class;
 	const char *instance;
 	const char *title;
@@ -272,6 +274,8 @@
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+static unsigned int tagw[LENGTH(tags)];
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -286,6 +290,7 @@
 	XClassHint ch = { NULL, NULL };
 
 	/* rule matching */
+    c->icon = NULL;
 	c->isfloating = 0;
 	c->tags = 0;
 	XGetClassHint(dpy, c->win, &ch);
@@ -298,6 +303,7 @@
 		&& (!r->class || strstr(class, r->class))
 		&& (!r->instance || strstr(instance, r->instance)))
 		{
+            c->icon = r->icon;
 			c->isfloating = r->isfloating;
 			c->tags |= r->tags;
 			for (m = mons; m && m->num != r->monitor; m = m->next);
@@ -435,7 +441,7 @@
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
 		do
-			x += TEXTW(tags[i]);
+			x += tagw[i];
 		while (ev->x >= x && ++i < LENGTH(tags));
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
@@ -704,6 +710,9 @@
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
+    char *tmp_ptr;
+    char buf[64];
+    char *iconsontag[LENGTH(tags)];
 
 	if (!m->showbar)
 		return;
@@ -715,16 +724,39 @@
 		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
 	}
 
+	for (i = 0; i < LENGTH(tags); i++)
+        iconsontag[i] = NULL;
+
 	for (c = m->clients; c; c = c->next) {
 		occ |= c->tags;
 		if (c->isurgent)
 			urg |= c->tags;
+
+		for (i = 0; i < LENGTH(tags); i++)
+            if (c->icon && c->tags & 1 << i) {
+                if (iconsontag[i]) {
+                    tmp_ptr = iconsontag[i];
+                    iconsontag[i] = (char *)malloc(strlen(tmp_ptr) + strlen(c->icon) + strlen(iconsep) + 3);
+                    strcpy(iconsontag[i], tmp_ptr);
+                    strcat(iconsontag[i], iconsep);
+                    strcat(iconsontag[i], c->icon);
+                } else {
+                    iconsontag[i] = (char *)malloc(strlen(c->icon) + 1);
+                    strcpy(iconsontag[i], c->icon);
+                }
+            }
 	}
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
-		w = TEXTW(tags[i]);
+		if (iconsontag[i])
+			snprintf(buf, 256, ptagf, tags[i], iconsontag[i]);
+		else
+			snprintf(buf, 256, etagf, tags[i]);
+		iconsontag[i] = buf;
+		w = TEXTW(iconsontag[i]);
+        tagw[i] = w = w > tagl_maxw ? tagl_maxw : w;
 		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, iconsontag[i], urg & 1 << i);
 		if (occ & 1 << i)
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
 				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
